{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp Modules and Functions Registrar (v0.5-WIP)",
  "Parameters": {
    "RollbarReadAccessToken": {
      "Type": "String",
      "Description": "Account-level token for read operations",
      "Default": ""
    },
    "RollbarWriteAccessToken": {
      "Type": "String",
      "Description": "Account-level token for write operations",
      "Default": ""
    },
    "RollbarProjectPrefix": {
      "Type": "String",
      "Description": "Optional prefix when creating Rollbar projects",
      "Default": ""
    },
    "EnableFirehose": {
      "Type": "String",
      "Description": "Enable Kinesis Firehose logging to S3 Bucket",
      "AllowedValues": [
        "yes",
        "no"
      ],
      "Default": "no"
    },
    "Secrets": {
      "Type": "String",
      "Description": "Comma-separated list of optional secret keys",
      "Default": ""
    },
    "LambdaSharpDeadLetterQueueArn": {
      "Type": "String",
      "Description": "Dead letter queue for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::DeadLetterQueueArn"
    },
    "LambdaSharpLoggingStreamArn": {
      "Type": "String",
      "Description": "Logging kinesis stream for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::LoggingStreamArn"
    },
    "LambdaSharpDefaultSecretKeyArn": {
      "Type": "String",
      "Description": "Default secret key for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::DefaultSecretKeyArn"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Source deployment S3 bucket name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Module deployment prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Module deployment prefix (lowercase)"
    },
    "DeploymentParent": {
      "Type": "String",
      "Description": "Parent stack name for nested deployments, blank otherwise",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "CloudFormation template MD5 checksum",
      "Default": "D790F6D748688B65115D3E469AA42762"
    }
  },
  "Resources": {
    "RegistrationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "ErrorReportTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "UsageReportTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "RegistrationTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "FirehoseLoggingBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "LogDeletion",
              "ExpirationInDays": "90",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "FirehoseLoggingStream": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "KinesisStreamSourceConfiguration": {
          "KinesisStreamARN": {
            "Fn::If": [
              "LambdaSharpLoggingStreamArnIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpLoggingStreamArn"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpLoggingStreamArn"
              }
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseLoggingRole",
              "Arn"
            ]
          }
        },
        "S3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "FirehoseLoggingBucket",
              "Arn"
            ]
          },
          "CloudWatchLoggingOptions": {
            "Enabled": "true",
            "LogGroupName": {
              "Ref": "FirehoseCloudWatchGroup"
            },
            "LogStreamName": {
              "Ref": "FirehoseCloudWatchStream"
            }
          },
          "Prefix": "firehose/",
          "BufferingHints": {
            "IntervalInSeconds": "60",
            "SizeInMBs": "100"
          },
          "CompressionFormat": "GZIP",
          "EncryptionConfiguration": {
            "NoEncryptionConfig": "NoEncryption"
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseLoggingRole",
              "Arn"
            ]
          }
        }
      }
    },
    "FirehoseCloudWatchGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "RetentionInDays": "30"
      }
    },
    "FirehoseCloudWatchStream": {
      "Type": "AWS::Logs::LogStream",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "LogGroupName": {
          "Ref": "FirehoseCloudWatchGroup"
        }
      }
    },
    "FirehoseLoggingRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Sid": "FirehoseLoggingPrincipal",
            "Effect": "Allow",
            "Principal": {
              "Service": "firehose.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}FirehoseLoggingPolicy"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "FirehoseLoggingDestinationS3Access",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "${FirehoseLoggingBucket.Arn}"
                    },
                    {
                      "Fn::Sub": "${FirehoseLoggingBucket.Arn}/*"
                    }
                  ]
                },
                {
                  "Sid": "FirehoseLoggingSourceStreamAccess",
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetShardIterator",
                    "kinesis:GetRecords"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpLoggingStreamArnIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpLoggingStreamArn"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpLoggingStreamArn"
                      }
                    ]
                  }
                },
                {
                  "Sid": "FirehoseLoggingCloudWatchLogsAccess",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "ProcessLogEvents": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "Modules/LambdaSharpRegistrar/Assets/ProcessLogEvents-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "LambdaSharpDeadLetterQueueArnIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpDeadLetterQueueArn"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpDeadLetterQueueArn"
              }
            ]
          }
        },
        "Description": "Process log events from all LambdaSharp module functions (v0.5-WIP)",
        "Environment": {
          "Variables": {
            "MODULE_NAME": "LambdaSharpRegistrar",
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_VERSION": "0.5-WIP",
            "LAMBDA_NAME": "ProcessLogEvents",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "LambdaSharpDeadLetterQueueArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDeadLetterQueueArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDeadLetterQueueArn"
                }
              ]
            },
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpDefaultSecretKeyArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                }
              ]
            },
            "STR_ERRORREPORTTOPIC": {
              "Ref": "ErrorReportTopic"
            },
            "STR_USAGEREPORTTOPIC": {
              "Ref": "UsageReportTopic"
            },
            "STR_REGISTRATIONTABLE": {
              "Fn::GetAtt": [
                "RegistrationTable",
                "Arn"
              ]
            }
          }
        },
        "Handler": "ProcessLogEvents::MindTouch.LambdaSharpRegistrar.ProcessLogEvents.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30"
      }
    },
    "ProcessLogEventsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${ProcessLogEvents}"
        },
        "RetentionInDays": 30
      }
    },
    "Register": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "Modules/LambdaSharpRegistrar/Assets/Register-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "LambdaSharpDeadLetterQueueArnIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpDeadLetterQueueArn"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpDeadLetterQueueArn"
              }
            ]
          }
        },
        "Description": "Register LambdaSharp modules and functions (v0.5-WIP)",
        "Environment": {
          "Variables": {
            "MODULE_NAME": "LambdaSharpRegistrar",
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_VERSION": "0.5-WIP",
            "LAMBDA_NAME": "Register",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "LambdaSharpDeadLetterQueueArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDeadLetterQueueArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDeadLetterQueueArn"
                }
              ]
            },
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpDefaultSecretKeyArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                }
              ]
            },
            "SEC_ROLLBARREADACCESSTOKEN": {
              "Ref": "RollbarReadAccessToken"
            },
            "SEC_ROLLBARWRITEACCESSTOKEN": {
              "Ref": "RollbarWriteAccessToken"
            },
            "STR_ROLLBARPROJECTPREFIX": {
              "Ref": "RollbarProjectPrefix"
            },
            "STR_REGISTRATIONTABLE": {
              "Fn::GetAtt": [
                "RegistrationTable",
                "Arn"
              ]
            }
          }
        },
        "Handler": "Register::MindTouch.LambdaSharpRegistrar.Register.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${Register}"
        },
        "RetentionInDays": 30
      }
    },
    "Finalizer": {
      "Type": "AWS::Lambda::Function",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "Modules/LambdaSharpRegistrar/Assets/Finalizer-DRYRUN.zip"
        },
        "Description": "Clean-up on deletion (v0.5-WIP)",
        "Environment": {
          "Variables": {
            "MODULE_NAME": "LambdaSharpRegistrar",
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_VERSION": "0.5-WIP",
            "LAMBDA_NAME": "Finalizer",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpDefaultSecretKeyArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                }
              ]
            },
            "STR_REGISTRATIONTABLE": {
              "Fn::GetAtt": [
                "RegistrationTable",
                "Arn"
              ]
            },
            "STR_FIREHOSE_LOGGINGBUCKET": {
              "Fn::If": [
                "FirehoseIsEnabled",
                {
                  "Fn::GetAtt": [
                    "FirehoseLoggingBucket",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Handler": "Finalizer::MindTouch.LambdaSharpRegistrar.Finalizer.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": 900
      }
    },
    "FinalizerInvocation": {
      "Type": "Custom::ModuleFinalizer",
      "Condition": "FirehoseIsEnabled",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "Finalizer",
            "Arn"
          ]
        },
        "DeploymentChecksum": {
          "Ref": "DeploymentChecksum"
        },
        "ModuleVersion": "0.5-WIP"
      },
      "DependsOn": [
        "ErrorReportTopic",
        "Finalizer",
        "FirehoseCloudWatchGroup",
        "FirehoseCloudWatchStream",
        "FirehoseLoggingBucket",
        "FirehoseLoggingRole",
        "FirehoseLoggingStream",
        "ModuleRole",
        "ProcessLogEvents",
        "ProcessLogEventsLogGroup",
        "ProcessLogEventsSource1EventMapping",
        "Register",
        "RegisterLogGroup",
        "RegisterSource1Permission",
        "RegisterSource1Subscription",
        "RegistrationTable",
        "RegistrationTopic",
        "UsageReportTopic"
      ]
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LoggingStreamReference",
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpLoggingStreamArnIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpLoggingStreamArn"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpLoggingStreamArn"
                      }
                    ]
                  }
                },
                {
                  "Sid": "RegistrationTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Subscribe"
                  ],
                  "Resource": {
                    "Ref": "RegistrationTopic"
                  }
                },
                {
                  "Sid": "ErrorReportTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "ErrorReportTopic"
                  }
                },
                {
                  "Sid": "UsageReportTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "UsageReportTopic"
                  }
                },
                {
                  "Sid": "RegistrationTable",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "RegistrationTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "RegistrationTable",
                              "Arn"
                            ]
                          },
                          "stream/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "RegistrationTable",
                              "Arn"
                            ]
                          },
                          "index/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "FirehoseLoggingBucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:CreateBucket",
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:DeleteObjectVersion",
                    "s3:DeleteObjectVersionTagging",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectTagging",
                    "s3:GetObjectTorrent",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionAcl",
                    "s3:GetObjectVersionTagging",
                    "s3:GetObjectVersionTorrent",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectTagging",
                    "s3:PutObjectVersionAcl",
                    "s3:PutObjectVersionTagging",
                    "s3:RestoreObject"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FirehoseLoggingBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "FirehoseLoggingBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "ModuleDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpDeadLetterQueueArnIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpDeadLetterQueueArn"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpDeadLetterQueueArn"
                      }
                    ]
                  }
                },
                {
                  "Sid": "SecretsDecryption",
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": {
                    "Fn::Split": [
                      ",",
                      {
                        "Fn::If": [
                          "SecretsIsEmpty",
                          {
                            "Fn::If": [
                              "LambdaSharpDefaultSecretKeyArnIsImported",
                              {
                                "Fn::ImportValue": {
                                  "Fn::Sub": [
                                    "${DeploymentPrefix}${Import}",
                                    {
                                      "Import": {
                                        "Fn::Select": [
                                          "1",
                                          {
                                            "Fn::Split": [
                                              "$",
                                              {
                                                "Ref": "LambdaSharpDefaultSecretKeyArn"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "Ref": "LambdaSharpDefaultSecretKeyArn"
                              }
                            ]
                          },
                          {
                            "Fn::Join": [
                              ",",
                              [
                                {
                                  "Fn::If": [
                                    "LambdaSharpDefaultSecretKeyArnIsImported",
                                    {
                                      "Fn::ImportValue": {
                                        "Fn::Sub": [
                                          "${DeploymentPrefix}${Import}",
                                          {
                                            "Import": {
                                              "Fn::Select": [
                                                "1",
                                                {
                                                  "Fn::Split": [
                                                    "$",
                                                    {
                                                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                                    }
                                  ]
                                },
                                {
                                  "Ref": "Secrets"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Sid": "ModuleLogStreamAccess",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ProcessLogEventsSource1EventMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 100,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::If": [
            "LambdaSharpLoggingStreamArnIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpLoggingStreamArn"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpLoggingStreamArn"
            }
          ]
        },
        "FunctionName": {
          "Ref": "ProcessLogEvents"
        },
        "StartingPosition": "LATEST"
      }
    },
    "RegisterSource1Subscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "Register",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "RegistrationTopic"
        }
      }
    },
    "RegisterSource1Permission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Register",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "RegistrationTopic"
        }
      }
    }
  },
  "Outputs": {
    "ModuleName": {
      "Value": "LambdaSharpRegistrar"
    },
    "ModuleVersion": {
      "Value": "0.5-WIP"
    },
    "LambdaSharpRegisterModuleHandler": {
      "Value": {
        "Ref": "RegistrationTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${DeploymentPrefix}CustomResource-LambdaSharp::Register::Module"
        }
      },
      "Description": "Custom resources for registering LambdaSharp modules"
    },
    "LambdaSharpRegisterFunctionHandler": {
      "Value": {
        "Ref": "RegistrationTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${DeploymentPrefix}CustomResource-LambdaSharp::Register::Function"
        }
      },
      "Description": "Custom resources for registering LambdaSharp functions"
    },
    "ErrorReportTopic": {
      "Value": {
        "Ref": "ErrorReportTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::ErrorReportTopic"
        }
      },
      "Description": "SNS topic for LambdaSharp module errors"
    },
    "UsageReportTopic": {
      "Value": {
        "Ref": "UsageReportTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::UsageReportTopic"
        }
      },
      "Description": "SNS topic for LambdaSharp function usage reports"
    }
  },
  "Conditions": {
    "FirehoseIsEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableFirehose"
        },
        "yes"
      ]
    },
    "SecretsIsEmpty": {
      "Fn::Equals": [
        {
          "Ref": "Secrets"
        },
        ""
      ]
    },
    "LambdaSharpDeadLetterQueueArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpDeadLetterQueueArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpDeadLetterQueueArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpLoggingStreamArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpLoggingStreamArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpLoggingStreamArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpDefaultSecretKeyArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "RollbarReadAccessToken": {
          "default": "Read Access Token"
        },
        "RollbarWriteAccessToken": {
          "default": "Write Access Token"
        },
        "RollbarProjectPrefix": {
          "default": "Project Prefix"
        },
        "EnableFirehose": {
          "default": "Enable Firehose"
        },
        "Secrets": {
          "default": "Secret Keys (ARNs)"
        },
        "LambdaSharpDeadLetterQueueArn": {
          "default": "Dead Letter Queue (ARN)"
        },
        "LambdaSharpLoggingStreamArn": {
          "default": "Logging Stream (ARN)"
        },
        "LambdaSharpDefaultSecretKeyArn": {
          "default": "Secret Key (ARN)"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 Bucket"
        },
        "DeploymentPrefix": {
          "default": "Deployment Prefix"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment Prefix (lowercase)"
        },
        "DeploymentParent": {
          "default": "Parent Stack Name"
        },
        "DeploymentChecksum": {
          "default": "Deployment Checksum"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "Rollbar Settings"
          },
          "Parameters": [
            "RollbarReadAccessToken",
            "RollbarWriteAccessToken",
            "RollbarProjectPrefix"
          ]
        },
        {
          "Label": {
            "default": "Firehose Settings"
          },
          "Parameters": [
            "EnableFirehose"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Dependencies"
          },
          "Parameters": [
            "LambdaSharpDeadLetterQueueArn",
            "LambdaSharpLoggingStreamArn",
            "LambdaSharpDefaultSecretKeyArn"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentParent",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2018-12-17",
      "ModuleName": "LambdaSharpRegistrar",
      "ModuleVersion": "0.5-WIP",
      "RuntimeCheck": true,
      "Hash": "D790F6D748688B65115D3E469AA42762",
      "GitSha": "0123456789ABCDEF0123456789ABCDEF01234567",
      "Assets": [],
      "Dependencies": [],
      "CustomResourceTypes": {
        "LambdaSharp::Register::Function": {
          "Request": [
            {
              "Name": "ModuleId",
              "Type": "String"
            },
            {
              "Name": "FunctionId",
              "Type": "String"
            },
            {
              "Name": "FunctionName",
              "Type": "String"
            },
            {
              "Name": "FunctionLogGroupName",
              "Type": "String"
            },
            {
              "Name": "FunctionMaxMemory",
              "Type": "String"
            },
            {
              "Name": "FunctionMaxDuration",
              "Type": "String"
            },
            {
              "Name": "FunctionPlatform",
              "Type": "String"
            },
            {
              "Name": "FunctionFramework",
              "Type": "String"
            },
            {
              "Name": "FunctionLanguage",
              "Type": "String"
            }
          ],
          "Response": [
            {
              "Name": "Registration",
              "Type": "String"
            }
          ]
        },
        "LambdaSharp::Register::Module": {
          "Request": [
            {
              "Name": "ModuleId",
              "Type": "String"
            },
            {
              "Name": "ModuleName",
              "Type": "String"
            },
            {
              "Name": "ModuleVersion",
              "Type": "String"
            }
          ],
          "Response": [
            {
              "Name": "Registration",
              "Type": "String"
            }
          ]
        }
      },
      "MacroNames": [],
      "ResourceNameMappings": {
        "FirehoseLoggingBucket": "Firehose::LoggingBucket",
        "FirehoseLoggingStream": "Firehose::LoggingStream",
        "FirehoseCloudWatchGroup": "Firehose::CloudWatchGroup",
        "FirehoseCloudWatchStream": "Firehose::CloudWatchStream",
        "FirehoseLoggingRole": "Firehose::LoggingRole",
        "ProcessLogEventsLogGroup": "ProcessLogEvents::LogGroup",
        "RegisterLogGroup": "Register::LogGroup",
        "FinalizerInvocation": "Finalizer::Invocation",
        "ModuleRole": "Module::Role",
        "ProcessLogEventsSource1EventMapping": "ProcessLogEvents::Source1EventMapping",
        "RegisterSource1Subscription": "Register::Source1Subscription",
        "RegisterSource1Permission": "Register::Source1Permission"
      },
      "CustomResourceNameMappings": {
        "Custom::ModuleDecryptSecret": "Module::DecryptSecret",
        "Custom::ModuleFinalizer": "Module::Finalizer"
      }
    }
  }
}