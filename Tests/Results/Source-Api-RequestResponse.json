{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp CloudFormation Test (v1.0)",
  "Parameters": {
    "Secrets": {
      "Type": "String",
      "Description": "Comma-separated list of optional secret keys",
      "Default": ""
    },
    "LambdaSharpDeadLetterQueueArn": {
      "Type": "String",
      "Description": "Dead letter queue for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::DeadLetterQueueArn"
    },
    "LambdaSharpLoggingStreamArn": {
      "Type": "String",
      "Description": "Logging kinesis stream for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::LoggingStreamArn"
    },
    "LambdaSharpLoggingStreamRoleArn": {
      "Type": "String",
      "Description": "Role for logging to kinesis stream for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::LoggingStreamRoleArn"
    },
    "LambdaSharpDefaultSecretKeyArn": {
      "Type": "String",
      "Description": "Default secret key for functions",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module import reference or a non-empty value",
      "Default": "$LambdaSharp::DefaultSecretKeyArn"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Source deployment S3 bucket name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Module deployment prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Module deployment prefix (lowercase)"
    },
    "DeploymentParent": {
      "Type": "String",
      "Description": "Parent stack name for nested deployments, blank otherwise",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "CloudFormation template MD5 checksum",
      "Default": "4282767766061A132BF25B1CFBAA9684"
    }
  },
  "Resources": {
    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "Test/Modules/TestModule/Assets/Function-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "LambdaSharpDeadLetterQueueArnIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpDeadLetterQueueArn"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpDeadLetterQueueArn"
              }
            ]
          }
        },
        "Description": "My function (v1.0)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "Test.TestModule:1.0",
            "LAMBDA_NAME": "Function",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "LambdaSharpDeadLetterQueueArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDeadLetterQueueArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDeadLetterQueueArn"
                }
              ]
            },
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpDefaultSecretKeyArnIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                }
              ]
            }
          }
        },
        "Handler": "Function::MindTouch.LambdaSharpTestModule.Function.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30"
      }
    },
    "FunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${Function}"
        },
        "RetentionInDays": 30
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "ModuleDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpDeadLetterQueueArnIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpDeadLetterQueueArn"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpDeadLetterQueueArn"
                      }
                    ]
                  }
                },
                {
                  "Sid": "SecretsDecryption",
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": {
                    "Fn::Split": [
                      ",",
                      {
                        "Fn::If": [
                          "SecretsIsEmpty",
                          {
                            "Fn::If": [
                              "LambdaSharpDefaultSecretKeyArnIsImported",
                              {
                                "Fn::ImportValue": {
                                  "Fn::Sub": [
                                    "${DeploymentPrefix}${Import}",
                                    {
                                      "Import": {
                                        "Fn::Select": [
                                          "1",
                                          {
                                            "Fn::Split": [
                                              "$",
                                              {
                                                "Ref": "LambdaSharpDefaultSecretKeyArn"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "Ref": "LambdaSharpDefaultSecretKeyArn"
                              }
                            ]
                          },
                          {
                            "Fn::Join": [
                              ",",
                              [
                                {
                                  "Fn::If": [
                                    "LambdaSharpDefaultSecretKeyArnIsImported",
                                    {
                                      "Fn::ImportValue": {
                                        "Fn::Sub": [
                                          "${DeploymentPrefix}${Import}",
                                          {
                                            "Import": {
                                              "Fn::Select": [
                                                "1",
                                                {
                                                  "Fn::Split": [
                                                    "$",
                                                    {
                                                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                                    }
                                  ]
                                },
                                {
                                  "Ref": "Secrets"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Sid": "ModuleLogStreamAccess",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegisterModule",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}CustomResource-LambdaSharp::Register::Module"
          }
        },
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "ModuleInfo": "Test.TestModule:1.0"
      }
    },
    "FunctionRegistration": {
      "Type": "Custom::LambdaSharpRegisterFunction",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}CustomResource-LambdaSharp::Register::Function"
          }
        },
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "Function"
        },
        "FunctionName": "Function",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${Function}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore2.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "128",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "FunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "LambdaSharpLoggingStreamArnIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpLoggingStreamArn"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpLoggingStreamArn"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "FunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "LambdaSharpLoggingStreamRoleArnIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpLoggingStreamRoleArn"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpLoggingStreamRoleArn"
            }
          ]
        }
      }
    },
    "ModuleRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "${Module::FullName} API (v${Module::Version})",
        "FailOnWarnings": true,
        "Name": {
          "Fn::Sub": "${AWS::StackName} Module API"
        }
      }
    },
    "ModuleRestApiItemsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ModuleRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "items",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"
          }
        },
        "ResourceId": {
          "Ref": "ModuleRestApiItemsResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/GET/items"
        }
      }
    },
    "ModuleRestApiItemsResourcePOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"
          }
        },
        "ResourceId": {
          "Ref": "ModuleRestApiItemsResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourcePOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/POST/items"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ModuleRestApiItemsResource"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourceGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"
          }
        },
        "ResourceId": {
          "Ref": "ModuleRestApiItemsResourceIdResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourceGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/GET/items/{id}"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourcePUT": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"
          }
        },
        "OperationName": "UpdateItem",
        "ResourceId": {
          "Ref": "ModuleRestApiItemsResourceIdResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourcePUTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/PUT/items/{id}"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourceDELETE": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations"
          }
        },
        "ResourceId": {
          "Ref": "ModuleRestApiItemsResourceIdResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiItemsResourceIdResourceDELETEPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleRestApi}/LATEST/DELETE/items/{id}"
        }
      }
    },
    "ModuleRestApiRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleRestApiPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "ModuleRestApiLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModuleRestApiPolicy"
            }
          }
        ]
      }
    },
    "ModuleRestApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ModuleRestApiRole",
            "Arn"
          ]
        }
      }
    },
    "ModuleRestApiDeploymentB76494426287A08CA2B55AA7C16D8D64": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": {
          "Fn::Sub": "${AWS::StackName} API [B76494426287A08CA2B55AA7C16D8D64]"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      },
      "DependsOn": [
        "ModuleRestApiItemsResourceGET",
        "ModuleRestApiItemsResourcePOST",
        "ModuleRestApiItemsResourceIdResourceGET",
        "ModuleRestApiItemsResourceIdResourcePUT",
        "ModuleRestApiItemsResourceIdResourceDELETE"
      ]
    },
    "ModuleRestApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ModuleRestApiDeploymentB76494426287A08CA2B55AA7C16D8D64"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "StageName": "LATEST"
      },
      "DependsOn": [
        "ModuleRestApiAccount"
      ]
    }
  },
  "Outputs": {
    "ModuleInfo": {
      "Value": "Test.TestModule:1.0"
    }
  },
  "Conditions": {
    "SecretsIsEmpty": {
      "Fn::Equals": [
        {
          "Ref": "Secrets"
        },
        ""
      ]
    },
    "LambdaSharpDeadLetterQueueArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpDeadLetterQueueArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpDeadLetterQueueArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpLoggingStreamArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpLoggingStreamArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpLoggingStreamArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpLoggingStreamRoleArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpLoggingStreamRoleArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpLoggingStreamRoleArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpDefaultSecretKeyArnIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpDefaultSecretKeyArn"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpDefaultSecretKeyArn"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "Secrets": {
          "default": "Secret Keys (ARNs)"
        },
        "LambdaSharpDeadLetterQueueArn": {
          "default": "Dead Letter Queue (ARN)"
        },
        "LambdaSharpLoggingStreamArn": {
          "default": "Logging Stream (ARN)"
        },
        "LambdaSharpLoggingStreamRoleArn": {
          "default": "Logging Stream Role (ARN)"
        },
        "LambdaSharpDefaultSecretKeyArn": {
          "default": "Secret Key (ARN)"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 Bucket"
        },
        "DeploymentPrefix": {
          "default": "Deployment Prefix"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment Prefix (lowercase)"
        },
        "DeploymentParent": {
          "default": "Parent Stack Name"
        },
        "DeploymentChecksum": {
          "default": "Deployment Checksum"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Runtime Imports"
          },
          "Parameters": [
            "LambdaSharpDeadLetterQueueArn",
            "LambdaSharpLoggingStreamArn",
            "LambdaSharpLoggingStreamRoleArn",
            "LambdaSharpDefaultSecretKeyArn"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentParent",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2018-12-31",
      "ModuleInfo": "Test.TestModule:1.0",
      "ParameterSections": [
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Description": "Comma-separated list of optional secret keys",
              "Label": "Secret Keys (ARNs)",
              "Default": ""
            }
          ]
        },
        {
          "Title": "LambdaSharp Runtime Imports",
          "Parameters": [
            {
              "Name": "DeadLetterQueueArn",
              "Type": "String",
              "Description": "Dead letter queue for functions",
              "Label": "Dead Letter Queue (ARN)",
              "Default": "$LambdaSharp::DeadLetterQueueArn"
            },
            {
              "Name": "LoggingStreamArn",
              "Type": "String",
              "Description": "Logging kinesis stream for functions",
              "Label": "Logging Stream (ARN)",
              "Default": "$LambdaSharp::LoggingStreamArn"
            },
            {
              "Name": "LoggingStreamRoleArn",
              "Type": "String",
              "Description": "Role for logging to kinesis stream for functions",
              "Label": "Logging Stream Role (ARN)",
              "Default": "$LambdaSharp::LoggingStreamRoleArn"
            },
            {
              "Name": "DefaultSecretKeyArn",
              "Type": "String",
              "Description": "Default secret key for functions",
              "Label": "Secret Key (ARN)",
              "Default": "$LambdaSharp::DefaultSecretKeyArn"
            }
          ]
        }
      ],
      "RuntimeCheck": true,
      "Hash": "4282767766061A132BF25B1CFBAA9684",
      "GitSha": "0123456789ABCDEF0123456789ABCDEF01234567",
      "Assets": [],
      "Dependencies": [
        {
          "ModuleFullName": "LambdaSharp.Core",
          "MinVersion": "0.5-WIP"
        }
      ],
      "CustomResourceTypes": {},
      "MacroNames": [],
      "ResourceNameMappings": {
        "FunctionLogGroup": "Function::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRegistration": "Module::Registration",
        "FunctionRegistration": "Function::Registration",
        "FunctionLogGroupSubscription": "Function::LogGroupSubscription",
        "ModuleRestApi": "Module::RestApi",
        "ModuleRestApiItemsResource": "Module::RestApi::ItemsResource",
        "ModuleRestApiItemsResourceGET": "Module::RestApi::ItemsResource::GET",
        "ModuleRestApiItemsResourceGETPermission": "Module::RestApi::ItemsResource::GET::Permission",
        "ModuleRestApiItemsResourcePOST": "Module::RestApi::ItemsResource::POST",
        "ModuleRestApiItemsResourcePOSTPermission": "Module::RestApi::ItemsResource::POST::Permission",
        "ModuleRestApiItemsResourceIdResource": "Module::RestApi::ItemsResource::IdResource",
        "ModuleRestApiItemsResourceIdResourceGET": "Module::RestApi::ItemsResource::IdResource::GET",
        "ModuleRestApiItemsResourceIdResourceGETPermission": "Module::RestApi::ItemsResource::IdResource::GET::Permission",
        "ModuleRestApiItemsResourceIdResourcePUT": "Module::RestApi::ItemsResource::IdResource::PUT",
        "ModuleRestApiItemsResourceIdResourcePUTPermission": "Module::RestApi::ItemsResource::IdResource::PUT::Permission",
        "ModuleRestApiItemsResourceIdResourceDELETE": "Module::RestApi::ItemsResource::IdResource::DELETE",
        "ModuleRestApiItemsResourceIdResourceDELETEPermission": "Module::RestApi::ItemsResource::IdResource::DELETE::Permission",
        "ModuleRestApiRole": "Module::RestApi::Role",
        "ModuleRestApiAccount": "Module::RestApi::Account",
        "ModuleRestApiDeploymentB76494426287A08CA2B55AA7C16D8D64": "Module::RestApi::DeploymentB76494426287A08CA2B55AA7C16D8D64",
        "ModuleRestApiStage": "Module::RestApi::Stage"
      },
      "CustomResourceNameMappings": {
        "Custom::LambdaSharpRegisterModule": "LambdaSharp::Register::Module",
        "Custom::LambdaSharpRegisterFunction": "LambdaSharp::Register::Function"
      }
    }
  }
}